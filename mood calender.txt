<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<title>Mood Memory Calendar üå∏</title>
<style>
body {
margin: 0;
font-family: "Poppins", sans-serif;
background: #ffe6f0 url('https://images.unsplash.com/photo-1501004318641-b39e6451bec6?auto=format&fit=crop&w=1350&q=80') no-repeat center/cover;
display: flex;
height: 100vh;
color: #333;
}
.calendar {
flex: 2;
display: flex;
flex-direction: column;
align-items: center;
justify-content: start;
padding: 20px;
}
.month {
display: flex;
justify-content: space-between;
align-items: center;
width: 80%;
}
.month button {
background: #e75480;
color: white;
border: none;
padding: 8px 12px;
border-radius: 10px;
cursor: pointer;
}
#monthYear {
font-size: 1.5em;
color: #e75480;
}
.days {
display: grid;
grid-template-columns: repeat(7, 1fr);
gap: 5px;
width: 80%;
margin-top: 10px;
}
.day {
background: rgba(255,255,255,0.8);
border-radius: 10px;
height: 80px;
display: flex;
flex-direction: column;
align-items: center;
justify-content: center;
cursor: pointer;
position: relative;
transition: transform 0.2s;
}
.day:hover {
transform: scale(1.05);
}
.day span.mood {
position: absolute;
bottom: 5px;
font-size: 20px;
}
.sidebar {
flex: 1;
background: rgba(255,255,255,0.9);
backdrop-filter: blur(4px);
border-left: 2px solid #f8c3d2;
padding: 20px;
overflow-y: auto;
}
.sidebar h2 {
color: #e75480;
margin-top: 0;
}
.sidebar input, .sidebar textarea {
width: 100%;
margin-top: 10px;
padding: 8px;
border-radius: 10px;
border: 1px solid #ccc;
font-family: inherit;
}
.sidebar textarea {
height: 100px;
resize: none;
}
button.action {
margin-top: 10px;
background: #e75480;
color: white;
border: none;
padding: 8px 12px;
border-radius: 10px;
cursor: pointer;
}
button.delete {
background: #999;
}
iframe {
width: 100%;
height: 300px;
margin-top: 15px;
border-radius: 10px;
border: none;
}
</style>
</head>
<body>

<div class="calendar">
<div class="month">
<button id="prevMonth">‚Üê</button>
<h2 id="monthYear"></h2>
<button id="nextMonth">‚Üí</button>
</div>
<div class="days" id="days"></div>
</div>

<div class="sidebar">
<h2 id="selectedDateTitle">Select a date üå∑</h2>
<label>Emoji:</label>
<input type="text" id="emojiInput" placeholder="üòä" />
<label>Your note:</label>
<textarea id="noteInput" placeholder="How did you feel today?"></textarea>
<label>Music/Video link (YouTube or Spotify):</label>
<input type="url" id="linkInput" placeholder="Paste link here..." />
<button class="action" id="saveBtn">üåº Save Memory</button>
<button class="action delete" id="deleteBtn">üóëÔ∏è Delete Memory</button>
<div id="mediaPlayer"></div>
</div>

<script>
const daysContainer = document.getElementById("days");
const monthYear = document.getElementById("monthYear");
const selectedDateTitle = document.getElementById("selectedDateTitle");
const emojiInput = document.getElementById("emojiInput");
const noteInput = document.getElementById("noteInput");
const linkInput = document.getElementById("linkInput");
const mediaPlayer = document.getElementById("mediaPlayer");
const saveBtn = document.getElementById("saveBtn");
const deleteBtn = document.getElementById("deleteBtn");

let currentDate = new Date();
let selectedKey = null;
const memories = JSON.parse(localStorage.getItem("memories") || "{}");

function renderCalendar() {
daysContainer.innerHTML = "";
const year = currentDate.getFullYear();
const month = currentDate.getMonth();
const firstDay = new Date(year, month, 1).getDay();
const lastDate = new Date(year, month + 1, 0).getDate();

monthYear.textContent = currentDate.toLocaleString("default", { month: "long" }) + " " + year;

for (let i = 0; i < firstDay; i++) {
const blank = document.createElement("div");
daysContainer.appendChild(blank);
}

for (let d = 1; d <= lastDate; d++) {
const day = document.createElement("div");
day.className = "day";
day.innerHTML = d;
const key = `${year}-${month}-${d}`;
if (memories[key]) {
const span = document.createElement("span");
span.className = "mood";
span.textContent = memories[key].emoji || "üí≠";
day.appendChild(span);
}
day.onclick = () => openMemory(key, year, month, d);
daysContainer.appendChild(day);
}
}

function openMemory(key, y, m, d) {
selectedKey = key;
selectedDateTitle.textContent = `${d} ${new Date(y, m).toLocaleString("default", { month: "long" })} ${y}`;
const data = memories[key] || { emoji: "", note: "", link: "" };
emojiInput.value = data.emoji;
noteInput.value = data.note;
linkInput.value = data.link;
renderMedia(data.link);
}

function renderMedia(link) {
mediaPlayer.innerHTML = "";
if (!link) return;
if (link.includes("youtube.com") || link.includes("youtu.be")) {
let videoId = "";
if (link.includes("v=")) videoId = link.split("v=")[1].split("&")[0];
else if (link.includes("youtu.be")) videoId = link.split("youtu.be/")[1];
mediaPlayer.innerHTML = `<iframe src="https://www.youtube.com/embed/${videoId}" allowfullscreen></iframe>`;
} else if (link.includes("spotify.com")) {
let embedLink = link.replace("open.spotify.com", "open.spotify.com/embed");
mediaPlayer.innerHTML = `<iframe src="${embedLink}" allow="encrypted-media"></iframe>`;
} else {
mediaPlayer.innerHTML = `<p>üîó Unsupported link type (use YouTube or Spotify)</p>`;
}
}

saveBtn.onclick = () => {
if (!selectedKey) return alert("Select a date first!");
memories[selectedKey] = {
emoji: emojiInput.value.trim() || "üí≠",
note: noteInput.value.trim(),
link: linkInput.value.trim()
};
localStorage.setItem("memories", JSON.stringify(memories));
renderCalendar();
renderMedia(memories[selectedKey].link);
};

deleteBtn.onclick = () => {
if (!selectedKey) return;
if (confirm("Delete this memory?")) {
delete memories[selectedKey];
localStorage.setItem("memories", JSON.stringify(memories));
emojiInput.value = "";
noteInput.value = "";
linkInput.value = "";
mediaPlayer.innerHTML = "";
renderCalendar();
}
};

document.getElementById("prevMonth").onclick = () => {
currentDate.setMonth(currentDate.getMonth() - 1);
renderCalendar();
};
document.getElementById("nextMonth").onclick = () => {
currentDate.setMonth(currentDate.getMonth() + 1);
renderCalendar();
};

renderCalendar();
</script>
</body>
</html>
